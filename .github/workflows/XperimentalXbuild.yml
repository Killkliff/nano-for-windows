# Copyright (c) 2023 okibcn
# This is free software, licensed under the GNU General Public License v3.0
# See /LICENSE for more information.
# https://github.com/okibcn/nano-for-windows
# Description: Builds nano for Windows

name: Xperimental4Windows
on:
  # schedule:
  #   - cron: '51 */8 * * *'
  # # runs at {0,8,16}h51m UTC every day
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Debug session enabled'
        required: false
        default: false
        type: boolean
      release:
        description: 'Delivery Channel'
        required: false
        default: 'Artifact'
        type: choice
        options:
          - "Artifact"
          - "Release"        

jobs:
  ## CONFIG ##############################################################################
  config:
    name: "üìÇ Prepare work folder"
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    outputs:
      cancel: ${{ steps.prechecks.outputs.cancel }}
      nano_version: ${{ steps.prepare.outputs.nano_version }}
    defaults:
      run:
        shell: bash
    steps:
    - name: "‚úîÔ∏è Pre-build checks"
      id: prechecks
      run: |
        git clone --depth=1 -n git://git.savannah.gnu.org/nano.git
        cd nano
        LAST_NANO=$( TZ=UTC git show --quiet --date='format-local:%Y-%m-%dT%H:%M:%SZ' --format="%cd" )
        CHANGES_NANO="$(git log -1 --pretty=%B)"
        git clone --depth=1 -n https://github.com/Bill-Gray/PDCursesMod.git curses
        cd curses
        LAST_CURSES=$( TZ=UTC git show --quiet --date='format-local:%Y-%m-%dT%H:%M:%SZ' --format="%cd" )
        CHANGES_CURSES="$(git log -1 --pretty=%B)"
        cd ../..
        rm -rf nano
        LAST_RELEASE=$( wget -qO- https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq .tag_name -r) \
          || LAST_RELEASE="2000.01.01T00:00:00Z"

        body=/home/runner/body.txt
        if [[ $LAST_NANO > $LAST_RELEASE ]]; then
          echo "NEW NANO SOURCE!!!!"
          echo "# NANO CHANGES" > $body
          echo >> $body
          echo "$CHANGES_NANO" >> $body
          echo >> $body
          echo >> $body
          cat $body
        fi
        if [[ $LAST_CURSES > $LAST_RELEASE ]]; then
          echo "NEW CURSES SOURCE!!!!"
          [ -f $body ] && echo >> $body
          echo "# PDCursesMod CHANGES" >> $body
          echo >> $body
          echo "$CHANGES_CURSES" >> $body
        fi
        if [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
          echo "NEW WINDOWS PATCHES!!!!"
          [ -f $body ] && echo >> $body
          echo "# WINDOWS PORTABILITY PATCHES" >> $body
          echo >> $body
        fi

        if [ -f $body ]; then
          # BODY=$(<$body)
          # echo "BODY<<EOF" >> $GITHUB_ENV
          # echo "$BODY" >> $GITHUB_ENV
          # echo "EOF" >> $GITHUB_ENV
          echo "cancel=false" >>  $GITHUB_OUTPUT
        else
          echo "NO NEW SOURCES. CANCELLING ACTION..."
          echo "cancel=true" >>  $GITHUB_OUTPUT
        fi

    - name: "‚è¨ Download repository"
      if: steps.prechecks.outputs.cancel != 'true'
      uses: actions/checkout@v3

    - name: "‚è¨ Install Toolchain OS Tools"
      if: steps.prechecks.outputs.cancel != 'true'
      run: |
        # FAST UBUNTU SERVERS
        # sudo sed -i -e 's|azure.archive.ubuntu.com|ubuntu.securedservers.com|g' /etc/apt/sources.list
        sudo -E apt -qq update
        sudo -E apt -qq install -y autoconf automake autopoint gcc gettext git groff make pkg-config texinfo p7zip-full
        URL=$(wget -qO- https://api.github.com/repos/upx/upx/releases/latest | grep 'browser.*url.*amd64_linux' | grep -o -e 'http.*\.xz')
        wget -qO- $URL | tar -Jxf -
        URL=$(wget -qO- https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest | grep 'browser.*url.*ucrt.*x86_64.tar.xz' | grep -o -e 'http.*\.xz')
        wget -qO- $URL | tar -Jxf -
        mv llvm* llvm-mingw

    - name: "‚è¨ Download Sources"
      if: steps.prechecks.outputs.cancel != 'true'
      run: |
        git clone git://git.savannah.gnu.org/nano.git
        cd nano
        git clone https://github.com/Bill-Gray/PDCursesMod.git curses
        ./autogen.sh

    - name: "ü™Ñ Apply Windows Portability Magic"
      id: prepare
      if: steps.prechecks.outputs.cancel != 'true'
      run: |
        cp ~/body.txt .

        function _diff() {
          # Thanks to @rasa for this function
          mapfile -t < <(find . -type f -name '*.bak')
          for bak in "${MAPFILE[@]}"; do
            src=${bak/.bak/}
            n=1
            while : ; do
              patch=${src}-${n}.patch
              test -f "${patch}" || break
              ((n++))
            done
            diff -u -w "${bak}" "${src}" >"${patch}" || true
            rm -f "${bak}" || true
            if [[ ! -s "${patch}" ]]; then
              rm -f "${patch}" || true
              continue
            fi
            echo "${patch}":
            cat "${patch}"
          done
          return 0
        }

        cd nano
        ##########################
        ##                        ##
        ##     APPLY PATCHES      ##
        ##                        ##
        ##########################

        # 1. >realpath< function doesn't exist on Windows, which isn't fully POSIX compliant.
        echo -e "\n\nPATCH: realpath() workaround applied."
        cp -p ./src/definitions.h{,.bak}
        echo " " >> ./src/definitions.h
        echo "#ifdef _WIN32" >> ./src/definitions.h
        echo "#include <windows.h>"  >> ./src/definitions.h
        echo "#include \"uniwidth.h\""  >> ./src/definitions.h
        echo "#define realpath(N,R) _fullpath((R),(N),0)" >> ./src/definitions.h
        echo "#endif" >> ./src/definitions.h
        _diff

        # Fix homedir detection
        echo -e "\n\nPATCH: configuring Windows home folder."
        sed -i.bak 's|\"HOME\"|"USERPROFILE\"|g' ./src/utils.c
        _diff

        # Modify temporal path from linux to windows
        echo -e "\n\nPATCH: configuring Windows temporal folder."
        sed -i.bak 's|TMPDIR|TEMP|g' ./src/files.c
        echo -e "\n\nPATCH: Convert invalid filename characters to ! for backup files."
        sed -i "s~if (thename\[i\] == '/')~if (strchr(\"<>:\\\\\"/\\\\\\\\|?*\", thename[i]))~g" ./src/files.c
        sed -i 's|/tmp/|~/AppData/Local/Temp/|g' ./src/files.c
        _diff

        # Modify path expansion with backslashes
        echo -e "\n\nPATCH: Configuring backslashes for folders."
        sed -i.bak "/free(tilded)/a\
          \\\\tfor(tilded = retval; \*tilded; ++tilded) if(\*tilded == '\\\\\\\\') \*tilded = '/';

          s|path\[i\] != '/'|path[i] != '/' \&\& path[i] != '\\\\\\\\'|" src/files.c
        _diff

        # default open() files in binary mode as linux does
        echo -e "\n\nPATCH: Forcing file management in binary mode like the Linux version."
        sed -i.bak 's/O_..ONLY/& | _O_BINARY/g' ./src/files.c
        _diff
        sed -i.bak 's/O_..ONLY/& | _O_BINARY/g' ./src/text.c
        _diff

        # Enable UTF-8 Terminal
        echo -e "\n\nPATCH: Enable UTF-8 console."
        sed -i.bak 's|vt220||g
          /x1B/d
          /nl_langinfo(CODESET)/ c\\tsetlocale(LC_ALL, "");'  src/nano.c
        _diff

        # Allow custom colors in terminals with more than 256 colors
        echo -e "\n\nPATCH: Allow true color."
        sed -i.bak "/COLORS == 256/ {s/==/>=/}"  src/rcfile.c
        _diff

        # Solve window resize crashes
        echo -e "\n\nPATCH: Window resize fix."
        sed -i.bak -e "/LINES and COLS accordingly/{n;N;d}" src/nano.c # delets 2 next lines
        sed -i "/LINES and COLS accordingly/a\
            \\\\tresize_term(0, 0); \\n\
            erase();" src/nano.c
        sed -i -e "/recreate the subwindows with their (new) sizes/{n;d}" src/nano.c
        _diff
        sed -i.bak 's/the_window_resized/input == KEY_RESIZE/' src/winio.c
        _diff

        # Solve long delay after unicode
        echo -e "\n\nPATCH: solved deadlock with unicode characters."
        sed -i.bak "/halfdelay(ISSET(QUICK_BLANK)/,/disable_kb_interrupt/d"  src/winio.c
        _diff

        # Add (Y/N/^C) to Save modified buffer prompt
        echo -e "\n\nPATCH: More info for exit message."
        sed -i.bak "s|Save modified buffer|& (Y/N/^C)|"  src/nano.c
        _diff

        # Fix browser folder change
        echo -e "\n\nPATCH: Fixed browser folder change."
        sed -i.bak 's/--selected/selected=0/' src/browser.c
        _diff

        # Fix for unicode char width detection using GNUlib internal function
        echo -e "\n\nPATCH: unicode char width detection using GNUlib internal function."
        sed -i.bak 's|wcwidth(wc)|uc_width(wc, "UTF-8")|g'  src/chars.c src/winio.c
        sed -i '/prototypes.h/a#include "uniwidth.h"'  src/chars.c
        _diff

        # Fix pipe-in data from Windows console.
        echo -e "\n\nPATCH: Fix pipe in data in Windows console."
        sed -i.bak "s|/dev/tty|CON|" src/nano.c
        sed -i "s/stream, 0/stream, fd/" src/nano.c
        sed -i "/FILE \*stream/,/stop the reading/ c\
          \\\\t static FILE \*stream;\\n\
          static int fd\=0;\\n\
          if \(fd\=\=0){\\n\
          if \(GetConsoleWindow\() \!\= NULL)\\n\
            fprintf\(stderr, _\(\"Reading data from keyboard; type a ^Z line to finish.\\\\n\"));\\n\
          fd \= dup\(0);\\n\
          stream \= fdopen\(fd, \"rb\");\\n\
          freopen\(\"CON\", \"rb\", stdin);\\n\
          FreeConsole\();\\n\
          AttachConsole\(ATTACH_PARENT_PROCESS);\\n\
          return FALSE;}\\n\
          endwin\();\\n\
          if \(stream \=\= NULL) {\\n\
          \\t int errnumber \= errno;\\n\
          \\t if\(fd \> -1) close\(fd);\\n\
          return FALSE;}" src/nano.c
        sed -i "/initscr/i\
          for\(int optind_\=optind; optind_ \< argc;optind_\+\+)\\n\
            if \(strcmp\(argv\[optind_], \"\-\") \=\= 0){scoop_stdin\();break;}" src/nano.c
        _diff


        ####                               ####
        #### PDCursesMod especific patches ####
        ####                               ####

        # Solve duplicated definitions ALT-ARROWS already in PDCursesMod
        echo -e "\n\nPATCH: remove duplicated definitions."
        sed -i.bak "/0x42[1234]/d" src/definitions.h
        _diff

        # PDCurses uses 64bit (chtype) for cell attributes instead of 32bit (int)
        echo -e "\n\nPATCH: Improving from 256colors to true color."
        sed -i.bak "/interface_color_pair/ {s/int/chtype/}" src/prototypes.h src/global.c
        _diff
        sed -i.bak "/int attributes/ {s/int/chtype/}" src/definitions.h
        _diff
        sed -i.bak "/bool parse_combination/ {s/int/chtype/}" src/rcfile.c
        sed -i "/int attributes/ {s/int/chtype/}" src/rcfile.c
        _diff

        # Desambiguation of BACKSPACE vs ^H, or ENTER vs ^M and certain CTRL+key combos
        echo -e "\n\nPATCH: Full key modifiers detection."
        sed -i.bak "/get_kbinput(midwin, VISIBLE)/a\
            \\\\tif (!((PDC_get_key_modifiers()) & (PDC_KEY_MODIFIER_SHIFT|PDC_KEY_MODIFIER_CONTROL|PDC_KEY_MODIFIER_ALT)) ) {\\n\
            \\tswitch (input) {\\n\
            \\t\\tcase 0x08:      input = KEY_BACKSPACE; break;\\n\
            \\t\\tcase 0x0d:      input = KEY_ENTER;\\n\
            \\t}\\n\
            }\\n\
            if (PDC_get_key_modifiers() & PDC_KEY_MODIFIER_CONTROL){\\n\
            \\tswitch (input) {\\n\
            \\t\\tcase '/':          input = 31; break;\\n\
            \\t\\tcase SHIFT_DELETE: input = CONTROL_SHIFT_DELETE; break;\\n\
            \\t}\\n\
            }"  src/nano.c
        _diff

        # Fix wchar_t 16 bits limitation to display emojis and all the suplemental codepoints:
        echo -e "\n\nPATCH: change to 32 bits wchar_t."
        sed -i.bak '0,/#/s//#define wchar_t int\n&/' src/definitions.h curses/curses.h
        _diff
        echo -e "\n\nPATCH: fix for emojis input and output and transparent background."
        wget -q https://github.com/okibcn/nano-editor/raw/my-github-sync/curses/pdcurses/getch.c
        wget -q https://github.com/okibcn/nano-editor/raw/my-github-sync/curses/wincon/pdcdisp.c
        wget -q https://github.com/okibcn/nano-editor/raw/my-github-sync/curses/wincon/pdckbd.c
        mv -b --suffix=.bak getch.c curses/pdcurses
        mv -b --suffix=.bak pdc*.c curses/wincon
        _diff

        # Fix ALT+[NUMBER|LETTER] not working with PDCursesMod
        echo -e "\n\nPATCH: ALT+[NUMBER|LETTER] not working."
        sed -i.bak "s/char)keystring\[2])/&\+\(\(unsigned char)keystring\[2]>\='9' \? ALT_A-\(int)'a' \: ALT_0-\(int)'0')/" src/global.c
        _diff

        # Fix Shifted metas SHIFT+ALT+[LETTER] not working with PDCursesMod
        echo -e "\n\nPATCH: Shifted metas SHIFT+ALT+[LETTER] not working."
        sed -i.bak "/(escapes == 0)/a\
          meta_key\=PDC_get_key_modifiers\() \& PDC_KEY_MODIFIER_ALT;" src/winio.c
        _diff


        ####                               ####
        ####   LLVM-MING SPECIFIC PATCHES  ####
        ####                               ####

        # Fix folder access test:
        echo -e "\n\nPATCH: Porting folder accessibility from executable to read access."
        sed -i.bak "s/X_OK/R_OK/" src/files.c
        _diff

        # Fix for PDCursesMod makefile to be aware of aarch64 in Xcompiling environment:
        echo -e "\n\nPATCH: PDCursesMod makefile to be aware of aarch64 in Xcompiling environment."
        sed -i.bak '/i686-w64-mingw32/a endif\n  ifdef _a64\n    PREFIX  = aarch64-w64-mingw32-' curses/wincon/Makefile  
        sed -i 's|AR\s*=\s*|&$(PREFIX)|' curses/wincon/Makefile  
        sed -i 's|STRIP\s*=\s*|&$(PREFIX)|' curses/wincon/Makefile
        _diff  


        ####                               ####
        ####    BRANDING and VERSIONING    ####
        ####                               ####

        NANO_VERSION="$(git describe --tags 2>/dev/null | sed "s/.\{10\}$//")"
        LAST_FULLVERSION="$(wget -qO- https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq .tag_name -r)" || echo "FIRST RELEASE!!!!"
        LAST_VERSION="$(echo $LAST_FULLVERSION | awk -F .  '{print $1"."$2}')"  # last version without the subbuild
        NANO_DATE=$(TZ=UTC git show --quiet --date='format-local:%Y.%m.%d' --format="%cd")
        if [ "${NANO_VERSION}" == "${LAST_VERSION}" ]; then
          # This is a new Windows build based on the same nano build, probably because there is a new curses patch
          SUBBUILD="$(echo $LAST_FULLVERSION | awk -F .  '{print $3}')"
          ((SUBBUILD=SUBBUILD+1))
          NANO_VERSION="${NANO_VERSION}.${SUBBUILD}"
        fi
        cd curses
        CURSES="$(wget -qO- https://api.github.com/repos/Bill-Gray/PDCursesMod/releases/latest | jq .tag_name -r)"
        CURSES_DATE=$(TZ=UTC git show --quiet --date='format-local:%Y.%m.%d' --format="%cd")
        CURSES="PDCursesMod ${CURSES} build $(git rev-list --count HEAD), ${CURSES_DATE}"
        cd ..
        BUILD_DATE=$(TZ=UTC date +'%Y.%m.%d')

        sed -i.bak 's/ GNU nano from git,//' src/nano.c
        sed -i 's|Compiled options|Using '"${CURSES}"'\\n &|' src/nano.c
        _diff
        sed -i.bak '/SOMETHING = "REVISION/cSOMETHING = "REVISION \\"GNU nano for Windows, '"${NANO_VERSION}"' 64 bits, '"${BUILD_DATE}"'\\""' src/Makefile.am
        _diff
        echo -e "\n\nGNU nano version Tag: ${NANO_VERSION}, ${NANO_VERSION}\nUsing $CURSES"
        echo "nano_version=${NANO_VERSION}" >>$GITHUB_OUTPUT

    - name: "üíæ Save Build Folder"
      uses: actions/cache@v3.2.6
      id: cache-sources
      if: steps.prechecks.outputs.cancel != 'true'
      with:
        path: ./*
        key: ${{ github.sha }}-repo

    - name: "üíæ Save metadata"
      if: steps.prebuild-checks.outputs.cancel != 'true'
      uses: actions/cache@v3.2.6
      id: cache-metadata
      with:
        key: ${{ github.sha }}-metadata
        path: ./body.txt

  ## BUILD ##############################################################################
  build:
    needs: [ config ]
    if: needs.config.outputs.cancel != 'true'
    name: "‚öôÔ∏è Build nano for Windows ${{ matrix.pretty }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: i686, name: x86, pretty: 32 bits }
          - { arch: x86_64, name: x64, pretty: 64 bits }
          - { arch: aarch64, name: amd64, pretty: on Arm }
    defaults:
      run:
        shell: bash
    steps:
    - name: "üìÇ Load Build Folder"
      uses: actions/cache@v3.2.6
      id: cache-sources
      with:
        path: ./*
        key: ${{ github.sha }}-repo

    - name: "‚è¨ Install Toolchain OS Tools"
      run: |
        # FAST UBUNTU SERVERS
        # sudo sed -i -e 's|azure.archive.ubuntu.com|ubuntu.securedservers.com|g' /etc/apt/sources.list
        sudo -E apt -qq update
        sudo -E apt -qq install -y autoconf automake autopoint gcc gettext git groff make pkg-config texinfo p7zip-full

    - name: "‚öôÔ∏è Build for Windows  ${{ matrix.pretty }}"
      run: |
        export PATH="$(pwd)/llvm-mingw/bin:$PATH"
        cd nano
        ARCH=${{ matrix.arch }}
        PDTERM="wincon"    # PDCursesMod supports wincon, vt, wingui, sdl1, sdl2
        BUILD="$(gcc -dumpmachine)"
        TARGET="${ARCH}-w64-mingw32"
        OUTDIR="$(pwd)/pkg_${ARCH}"
        [ "${ARCH}" != "i686" ] && BITS="64" || BITS="32"
        [ "${ARCH}" == "aarch64" ] && _arch="_a64"
        [ "${ARCH}" == "x86_64" ] && _arch="_w64"
        [ "${ARCH}" == "i686" ] && _arch="_w32"

        export CURSES_DIR="$(pwd)/curses"
        export CFLAGS="-O3 -I${CURSES_DIR} -DPDC_FORCE_UTF8 -DPDC_NCMOUSE"
        export LDFLAGS="-L${CURSES_DIR}/${PDTERM} -static -static-libgcc ${CURSES_DIR}/${PDTERM}/pdcurses.a"
        export NCURSESW_CFLAGS="-I${CURSES_DIR} -DNCURSES_STATIC  -DENABLE_MOUSE"
        export NCURSESW_LIBS="-l:pdcurses.a -lwinmm"
        export LIBS="-lbcrypt"

        # cross Build pdcurses for destination host
        cd "${CURSES_DIR}/${PDTERM}"
        make -j$(($(nproc)*2)) WIDE=Y UTF8=Y ${_arch}=Y
        cd ../..

        # Build nano
        sed -i 's/...bits/${{ matrix.pretty }}/' src/Makefile.am
        mkdir -p "$(pwd)/build_${TARGET}/nano"
        cd "$(pwd)/build_${TARGET}/nano"
        ../../configure --host="${TARGET}" --prefix="${OUTDIR}"  \
          --enable-{utf8,threads=windows} --disable-{nls,speller} \
          --sysconfdir="C:\\ProgramData"
        make -j$(($(nproc)*2)) && \
        make install-strip || exit 1
        llvm-strip -s "${OUTDIR}/bin/nano.exe"
        ../upx*/upx */nano.exe || true
        cd ${OUTDIR}
        mv bin/nano.exe share/doc/nano/* ../../LICENSE ../../README.md .
        mv share/nano syntax
        rm -rf bin share

    - name: "üîß Prepare debug session"
      if: github.event.inputs.debug_enabled == 'true'
      run: |
        ## install zsh
        sudo apt install zsh zsh-syntax-highlighting

        ## oh-my-posh
        sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-posh
        sudo chmod +x /usr/local/bin/oh-my-posh

        ## setting rc files
        echo "eval \"\$(oh-my-posh init \$(oh-my-posh get shell))\"" >> ~/.bashrc
        echo "eval \"\$(oh-my-posh init \$(oh-my-posh get shell))\"" >> ~/.zshrc

        ## Default profiles
        wget -q https://github.com/okibcn/miniU/raw/main/Github_Linux/.nanorc -O  ~/.nanorc
        wget -q https://github.com/okibcn/miniU/raw/main/Github_Linux/profile.sh -O  ~/profile.sh
        cp /etc/bash.bashrc ~
        cat ~/profile.sh >> ~/bash.bashrc
        sudo cp ~/bash.bashrc /etc/bash.bashrc -f
        cp ~/profile.sh ~/.zshrc


    - name: "üêû Debug session"
      uses: mxschmitt/action-tmate@v3
      if: github.event.inputs.debug_enabled == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ## More info at https://til.simonwillison.net/github-actions/debug-tmate
        ##           or https://github.com/mxschmitt/action-tmate

    

    - name: "üëç Upload Artifact nano_${{ matrix.arch }}_v${{ needs.config.outputs.nano_version }}"
      uses: actions/upload-artifact@v3
      with:
        name: nano-for-windows_${{ matrix.name }}_${{ needs.config.outputs.nano_version }}
        path: |
          nano/pkg_${{ matrix.arch }}/*


  ## PUBLISH ##############################################################################
  publish:
    if: needs.config.outputs.cancel != 'true'
    needs:
    - config
    - build
    name: "üì® Publish"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: "‚è¨ Download repository"
      uses: actions/checkout@v3

    - name: "üì¨ Receive Images from Build Jobs"
      uses: actions/download-artifact@v3
      with:
        path: ./

    - name: "üì¨ Receive metadata"
      uses: actions/cache@v3.2.6
      id: cache-metadata
      with:
        key: ${{ github.sha }}-metadata
        path: ./body.txt

    - name: "üöÆ Recycle Cache"
      uses: snnaplab/delete-branch-cache-action@v1

    - name: "üöÆ Recycle Artifacts"
      uses: geekyeggo/delete-artifact@v2
      with:
          name: '*'

    - name: "üì¶ Create Packages"
      if: steps.prechecks.outputs.cancel != 'true'
      run: |
        ls -1 | grep nano-for-windows | while read f; do
          cd $f
          7z a -tzip -aoa -mmt"$(nproc)" -- ../${f}.zip *
          cd ..
        done
        sha256sum *.zip >hashes.txt

    - name: "üëç Upload Artifact"
      uses: actions/upload-artifact@v3
      if: env.CANCEL != 'true' && github.event.inputs.release == 'Artifact'
      with:
        name: ${{ needs.config.outputs.nano_version }}
        path: |
          *.zip
          hashes.txt
          body.txt

    - name: "üéâ Publish a new release"
      uses: softprops/action-gh-release@v0.1.15
      # WARNING: before useing this action go to https://github.com/OWNER/REPO/settings/actions
      # and in **Workflow Permissions** section give actions **Read and Write permissions**.
      if: github.event_name != 'workflow_dispatch' || github.event.inputs.release == 'Release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.config.outputs.nano_version }}
        body_path: body.txt
        files: ./*.zip ./hashes.txt
